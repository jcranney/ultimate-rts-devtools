#!/usr/bin/env python3

import argparse
import sys

class CentroiderCLI():
    # following tutorial from:
    # https://chase-seibert.github.io/blog/2014/03/21/python-multilevel-argparse.html

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        commands = []
        for attribute in self.__dir__():
            if attribute[0] == "_":
                continue
            doc = getattr(self,attribute).__doc__
            if doc is None:
                doc = ""
            commands.append({
                "cmd" : attribute,
                "doc" : doc,
            })
        usage = """
centroider <command> [<args>]

The valid commands are:
"""
        usage += "\n".join([
            f"{command["cmd"]:>10s}     {command["doc"]:<s}"
            for command in commands
        ])
        parser = argparse.ArgumentParser(usage=usage)
        parser.add_argument("command", help="Subcommand to run")
        args = parser.parse_args(sys.argv[1:2])

        if not hasattr(self, args.command):
            print(f"Unrecognized centroider command: `{args.command}`\n")
            parser.print_help()
            exit(1)
        
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()
    
    def start(self):
        """Start centroider"""
        pass

    def stop(self):
        """Stop centroider"""
        pass

    def reset(self):
        """Reset centroider"""
        pass

    def bgpix(self):
        """Read/set number of bg pixels used in row subtraction"""
        pass

    def cogthresh(self):
        """Read/set centre of cgravity threshold for WFS"""
        pass

if __name__ == "__main__":
    centroider = CentroiderCLI()
